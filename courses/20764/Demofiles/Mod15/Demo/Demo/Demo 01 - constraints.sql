-- Module 15 - Demo 1

-- Step 1 - connect this query window to your copy of AdventureWorksLT

-- Step 2 - create two tables for this demonstration
DROP TABLE IF EXISTS SalesLT.ManagerSettings;
DROP TABLE IF EXISTS SalesLT.Manager;
GO
CREATE TABLE SalesLT.Manager
( ManagerId int NOT NULL CONSTRAINT pk_Manager PRIMARY KEY,
  ManagerName nvarchar(50) NOT NULL CONSTRAINT u_ManagerName UNIQUE,
  ManagerBonus int CONSTRAINT ck_ManagerBonus CHECK (ManagerBonus < 1000),
  ManagerPassword varbinary(50) NOT NULL
);
GO
CREATE TABLE SalesLT.ManagerSettings
( ManagerSettingsId int NOT NULL CONSTRAINT pk_ManagerSettings PRIMARY KEY NONCLUSTERED,
  ManagerId int NOT NULL,
  SettingName varchar(20),
  SettingValue varchar(20)
)

CREATE CLUSTERED INDEX ix_ManagerSettings_ManagerID ON SalesLT.ManagerSettings (ManagerId);
GO

ALTER TABLE SalesLT.ManagerSettings ADD CONSTRAINT FK_ManagerSettings_Manager FOREIGN KEY (ManagerId)
REFERENCES SalesLT.Manager (ManagerId)
GO
ALTER TABLE SalesLT.ManagerSettings WITH CHECK CHECK CONSTRAINT FK_ManagerSettings_Manager;
GO


INSERT SalesLT.Manager (ManagerId, ManagerName, ManagerBonus, ManagerPassword)
VALUES (1, N'superuser', 0, 0x3EED6B62548EC64A90E5D5D186FC9E5C),
(2, N'PeledYael', 500, 0x19EF561D56A24D42A54169BD3DE23652),
(3, N'DavisSara', 600, 0xD42025F8D7A67248AC36C5C8E955FA71);

INSERT SalesLT.ManagerSettings (ManagerSettingsId, ManagerId, SettingName, SettingValue)
VALUES
(1,1,'ScreenSize','700x500'),(2,1,'ScreenPosition','0,0'),(3,2,'ScreenSize','640x480'),
(4,2,'ScreenPosition','100,100'),(5,3,'ScreenSize','1240x960'),(6,3,'ScreenPosition','200,350')

-- Step 3 - disable a check constraint
-- first, show that the check constraint is enabled and trusted
SELECT name, is_not_trusted, is_disabled
FROM sys.check_constraints
WHERE name = 'ck_ManagerBonus';

-- Step 4 - disable the check constraint
ALTER TABLE SalesLT.Manager NOCHECK CONSTRAINT ck_ManagerBonus;

-- Step 5 - show that the constraint is disabled and marked untrusted
SELECT name, is_not_trusted, is_disabled
FROM sys.check_constraints
WHERE name = 'ck_ManagerBonus';

-- Step 6 - enable the constraint using CHECK
ALTER TABLE SalesLT.Manager CHECK CONSTRAINT ck_ManagerBonus;

-- Step 7 - show that the constraint is enabled and marked untrusted
SELECT name, is_not_trusted, is_disabled
FROM sys.check_constraints
WHERE name = 'ck_ManagerBonus';

-- Step 8 - enable the constraint using WITH CHECK CHECK
ALTER TABLE SalesLT.Manager WITH CHECK CHECK CONSTRAINT ck_ManagerBonus;

-- Step 9 - show that the constraint is enabled and marked trusted
SELECT name, is_not_trusted, is_disabled
FROM sys.check_constraints
WHERE name = 'ck_ManagerBonus';

-- Step 10 - Disable a non-clustered primary key constraint
ALTER INDEX pk_ManagerSettings ON SalesLT.ManagerSettings DISABLE;

-- Step 11 - show that the index is disabled
SELECT name, index_id, type_desc, is_disabled
FROM sys.indexes
WHERE object_id = object_id('SalesLT.ManagerSettings');

-- Step 12 - show that data can still be inserted into the table
INSERT SalesLT.ManagerSettings (ManagerSettingsId, ManagerId, SettingName, SettingValue)
VALUES
(7,1,'Theme','dark')

-- Step 13 - enable the index
ALTER INDEX pk_ManagerSettings ON SalesLT.ManagerSettings REBUILD;

-- Step 14 - show that the index is enabled
SELECT name, index_id, type_desc, is_disabled
FROM sys.indexes
WHERE object_id = object_id('SalesLT.ManagerSettings');

-- Step 15 - Disable clustered primary key constraint
-- note the warnings generated by this command
ALTER INDEX pk_Manager ON SalesLT.Manager DISABLE;

-- Step 16 - show that the index is disabled, and that other indexes are also disabled
SELECT name, index_id, type_desc, is_disabled
FROM sys.indexes
WHERE object_id = object_id('SalesLT.Manager');

-- Step 17 - enable the index
ALTER INDEX pk_Manager ON SalesLT.Manager REBUILD;

-- Step 18 - show that the nonclustered index is still disabled
SELECT name, index_id, type_desc, is_disabled
FROM sys.indexes
WHERE object_id = object_id('SalesLT.Manager');

-- Step 19 - enable the nonclustered index
ALTER INDEX u_ManagerName ON SalesLT.Manager REBUILD;

-- Step 20 - re-enable the foreign key which references the clustered primary key
ALTER TABLE SalesLT.ManagerSettings WITH CHECK CHECK CONSTRAINT FK_ManagerSettings_Manager;

-- Step 21 - drop the demonstration objects
DROP TABLE IF EXISTS SalesLT.ManagerSettings;
DROP TABLE IF EXISTS SalesLT.Manager;
